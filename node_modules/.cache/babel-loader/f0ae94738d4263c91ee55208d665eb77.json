{"ast":null,"code":"var _jsxFileName = \"/home/monero/Desktop/react-ecommerce-main/src/Context.js\";\nimport React, { Component } from 'react';\nimport { storeProducts, detailProduct } from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductContext = /*#__PURE__*/React.createContext(); // logikanya semua data Data.js ditangkap dan masukan kedalam state dan dilempar ke ProductList.JS\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      detailProduct: detailProduct,\n      cart: [],\n      modalOpen: false,\n      modalProduct: detailProduct,\n      cartSubtotal: 0,\n      cartTax: 0,\n      cartTotal: 0\n    };\n\n    this.setProducts = () => {\n      let tempProducts = [];\n      storeProducts.forEach(item => {\n        const singleItem = { ...item\n        };\n        tempProducts = [...tempProducts, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: tempProducts\n        };\n      });\n    };\n\n    this.getItem = id => {\n      const product = this.state.products.find(item => item.id === id);\n      return product;\n    };\n\n    this.handleDetail = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          detailProduct: product\n        };\n      });\n    };\n\n    this.addToCart = id => {\n      let tempProducts = [...this.state.products]; // index berfungsi untuk membedakan masing2 product\n\n      const index = tempProducts.indexOf(this.getItem(id));\n      const product = tempProducts[index]; // ketika tambah cart maka true dan count akan jadi 1\n\n      product.inCart = true;\n      product.count = 1;\n      const price = product.price;\n      product.total = price;\n      this.setState(() => {\n        return {\n          product: tempProducts,\n          cart: [...this.state.cart, product]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.openModal = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        // ketika modal open modal produk berisi data produk modalProduct:product\n        return {\n          modalProduct: product,\n          modalOpen: true\n        };\n      });\n    };\n\n    this.closeModal = id => {\n      this.setState(() => {\n        return {\n          modalOpen: false\n        };\n      });\n    };\n\n    this.increase = id => {\n      let tempCart = [...this.state.cart];\n      const selectProduct = tempCart.find(item => item.id === id);\n      const index = tempCart.indexOf(selectProduct);\n      const product = tempCart[index];\n      product.count = product.count + 1; //count disini adalah Quantity yang ada di data \n\n      product.total = product.count * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        // perbaharui total \n        this.addTotals();\n      });\n    };\n\n    this.decrease = id => {\n      let tempCart = [...this.state.cart];\n      const selectProduct = tempCart.find(item => item.id === id);\n      const index = tempCart.indexOf(selectProduct);\n      const product = tempCart[index];\n      product.count = product.count - 1; //count disini adalah Quantity yang ada di data \n      // kasih kondisi kalo kurang dari 1 dan tetap di kurangi akan dihapus. kalo else maka di kalikan\n\n      if (product.count === 0) {\n        this.removeItem(id);\n      } else {\n        product.total = product.count * product.price;\n        this.setState(() => {\n          return {\n            cart: [...tempCart]\n          };\n        }, () => {\n          // perbaharui total \n          this.addTotals();\n        });\n      }\n    };\n\n    this.removeItem = id => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart]; // gunakan \"filter\" untuk mengambil barang berdasarkan idnya, pada tahap ini barang yang diambil adalah barang yg tidak dihapus makanya pake !==\n\n      tempCart = tempCart.filter(item => item.id !== id);\n      const index = tempProducts.indexOf(this.getItem(id));\n      let removeProduct = tempProducts[index];\n      removeProduct.inCart = false;\n      removeProduct.count = 0;\n      removeProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals(); //jalankan kembali total karna ada id yang kita hapus biar update datanya\n      });\n    };\n\n    this.clearCart = () => {\n      // kembalikan isi cart jadi array kosong\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        // setProducts kembali kedefault kosong agar incartnya false atau kosong\n        this.setProducts(); // jalankan semua fungsi agar function mengidentifikasi ulang agar kosong lah pokoknya \n\n        this.addTotals();\n      });\n    };\n\n    this.addTotals = () => {\n      // hitung total\n      let subtotal = 0; // keluar kan semua data yang ada di dalam cart untuk proses Hitung\n\n      this.state.cart.map(item => subtotal += item.total);\n      const tempTax = subtotal * 0.1; //10% = 0.1\n      //toFixed untuk membulatkan angka (2 angka dibelakang ',')\n\n      const tax = parseFloat(tempTax.toFixed(2));\n      const total = subtotal + tax; // masukan kedalam setState\n\n      this.setState(() => {\n        // return untuk membuat function jadi callback\n        return {\n          cartSubtotal: subtotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      });\n    };\n  }\n\n  // componentDidMount berfungsi menjalankan component setelah content pada web berhasil dirender\n  componentDidMount() {\n    this.setProducts();\n  } // memasukan data kedalam singleItem bedanya dengan yg distate. kalo yang ini data akan seola2 direfresh sehingga ketika di ada to cart bisa berubah menjadi incart\n\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // provider dibawah digunakan agar seluruh function yang dibuat dapat digunakan di class yg mengimportnya \n      // titik 3x digunakan untuk mengirimkan semua data yang ada dalam variable didalam state\n      _jsxDEV(ProductContext.Provider, {\n        value: { ...this.state,\n          handleDetail: this.handleDetail,\n          addToCart: this.addToCart,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          increase: this.increase,\n          decrease: this.decrease,\n          removeItem: this.removeItem,\n          clearCart: this.clearCart\n        },\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductConsumer, ProductProvider };","map":{"version":3,"sources":["/home/monero/Desktop/react-ecommerce-main/src/Context.js"],"names":["React","Component","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","state","products","cart","modalOpen","modalProduct","cartSubtotal","cartTax","cartTotal","setProducts","tempProducts","forEach","item","singleItem","setState","getItem","id","product","find","handleDetail","addToCart","index","indexOf","inCart","count","price","total","addTotals","openModal","closeModal","increase","tempCart","selectProduct","decrease","removeItem","filter","removeProduct","clearCart","subtotal","map","tempTax","tax","parseFloat","toFixed","componentDidMount","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {storeProducts,detailProduct} from './data';\n\nconst ProductContext = React.createContext();\n\n// logikanya semua data Data.js ditangkap dan masukan kedalam state dan dilempar ke ProductList.JS\nclass ProductProvider extends Component {\n    state = {\n        products:[],\n        detailProduct:detailProduct,\n        cart:[],\n        modalOpen : false,\n        modalProduct : detailProduct,\n        cartSubtotal : 0,\n        cartTax : 0,\n        cartTotal : 0\n    }\n\n    // componentDidMount berfungsi menjalankan component setelah content pada web berhasil dirender\n    componentDidMount(){\n        this.setProducts();\n    }\n    \n    // memasukan data kedalam singleItem bedanya dengan yg distate. kalo yang ini data akan seola2 direfresh sehingga ketika di ada to cart bisa berubah menjadi incart\n    setProducts = () => {\n        let tempProducts = [];\n        storeProducts.forEach(item => {\n            const singleItem = {...item}\n            tempProducts = [...tempProducts, singleItem];\n        })\n        this.setState(() => {\n            return {products:tempProducts}\n        })\n    }\n\n    // mengambil id yang dikirim dari product\n    getItem = id => {\n        const product = this.state.products.find(item => item.id === id);\n        return product;\n    } \n    // fungsi ketika handleDetail di klik\n    handleDetail = id =>{\n        const product = this.getItem(id);\n        this.setState(() => {\n            return {detailProduct:product}\n        })\n    }\n    // fungsi ketika handleCart di klik\n    addToCart = id =>{\n        let tempProducts = [...this.state.products];\n        // index berfungsi untuk membedakan masing2 product\n        const index = tempProducts.indexOf(this.getItem(id))\n        const product = tempProducts[index];\n        // ketika tambah cart maka true dan count akan jadi 1\n        product.inCart = true;\n        product.count = 1;\n        const price = product.price;\n        product.total = price;\n        this.setState(()=>{\n            return {product:tempProducts, cart:[...this.state.cart,product]}\n        },\n        () => {\n            this.addTotals();\n        }\n        )\n    }\n    openModal = id => {\n        const product = this.getItem(id);\n        this.setState(()=>{\n            // ketika modal open modal produk berisi data produk modalProduct:product\n            return {modalProduct:product, modalOpen:true}\n        })\n    }\n    closeModal = id => {\n        this.setState(()=>{\n            return {modalOpen:false}\n        })\n    }\n    increase = id => {\n        let tempCart = [...this.state.cart];\n        const selectProduct = tempCart.find(item => item.id === id);\n        const index = tempCart.indexOf(selectProduct);\n        const product = tempCart[index];\n\n        product.count = product.count + 1; //count disini adalah Quantity yang ada di data \n        product.total = product.count * product.price;\n\n        this.setState(() => {\n            return {cart:[...tempCart]}\n        },()=>{\n            // perbaharui total \n            this.addTotals();\n        })\n    }\n    decrease = id => {\n        let tempCart = [...this.state.cart];\n        const selectProduct = tempCart.find(item => item.id === id);\n        const index = tempCart.indexOf(selectProduct);\n        const product = tempCart[index];\n\n        product.count = product.count - 1; //count disini adalah Quantity yang ada di data \n        // kasih kondisi kalo kurang dari 1 dan tetap di kurangi akan dihapus. kalo else maka di kalikan\n        if(product.count === 0){\n            this.removeItem(id);\n        }else{\n            product.total = product.count * product.price;\n\n            this.setState(() => {\n                return {cart:[...tempCart]}\n            },()=>{\n                // perbaharui total \n                this.addTotals();\n            })\n        }\n    }\n    removeItem = id => {\n        let tempProducts = [...this.state.products];\n        let tempCart = [...this.state.cart];\n        \n        // gunakan \"filter\" untuk mengambil barang berdasarkan idnya, pada tahap ini barang yang diambil adalah barang yg tidak dihapus makanya pake !==\n        tempCart = tempCart.filter(item => item.id !== id);\n\n        const index = tempProducts.indexOf(this.getItem(id));\n        let removeProduct = tempProducts[index];\n        removeProduct.inCart = false;\n        removeProduct.count = 0;\n        removeProduct.total = 0;\n\n        this.setState(() => {\n            return {\n                cart : [...tempCart],\n                products : [...tempProducts]\n            }\n        },() => {\n            this.addTotals(); //jalankan kembali total karna ada id yang kita hapus biar update datanya\n        });\n    }\n    clearCart = () => {\n        // kembalikan isi cart jadi array kosong\n        this.setState(()=>{\n            return {cart:[]};\n        },()=> {\n            // setProducts kembali kedefault kosong agar incartnya false atau kosong\n            this.setProducts();\n            // jalankan semua fungsi agar function mengidentifikasi ulang agar kosong lah pokoknya \n            this.addTotals();\n        });\n    }\n    addTotals = () => {\n        // hitung total\n        let subtotal = 0;\n        // keluar kan semua data yang ada di dalam cart untuk proses Hitung\n        this.state.cart.map(item => (subtotal += item.total));\n        const tempTax = subtotal*0.1; //10% = 0.1\n        //toFixed untuk membulatkan angka (2 angka dibelakang ',')\n        const tax = parseFloat(tempTax.toFixed(2));\n        const total = subtotal + tax;\n        // masukan kedalam setState\n        this.setState(() =>{\n            // return untuk membuat function jadi callback\n            return{\n                cartSubtotal : subtotal,\n                cartTax : tax,\n                cartTotal : total\n            };\n        })\n    }\n    \n\n    render() {\n        return (\n            // provider dibawah digunakan agar seluruh function yang dibuat dapat digunakan di class yg mengimportnya \n            // titik 3x digunakan untuk mengirimkan semua data yang ada dalam variable didalam state\n            <ProductContext.Provider value={{\n                ...this.state, \n                handleDetail:this.handleDetail, \n                addToCart:this.addToCart, \n                openModal:this.openModal, \n                closeModal:this.closeModal, \n                increase:this.increase, \n                decrease:this.decrease, \n                removeItem:this.removeItem, \n                clearCart:this.clearCart}}>\n\n                    {this.props.children}\n                    \n            </ProductContext.Provider>\n        );\n    }\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport {ProductConsumer,ProductProvider};"]},"metadata":{},"sourceType":"module"}